#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(299, 413);
inline const PParam KNIGHT_MAT = S(1080, 960);
inline const PParam BISHOP_MAT = S(1053, 1024);
inline const PParam ROOK_MAT   = S(1590, 1709);
inline const PParam QUEEN_MAT  = S(3600, 3053);
inline const PParam TEMPO_VAL  = S(58, 16);

inline const PParam BISHOP_PAIR_VAL  = S(80, 175);
inline const PParam DOUBLED_PAWN_VAL = S(-46, -80);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -3);

inline i32 AETH_WEIGHT_FRIENDLY = 40;
inline i32 AETH_WEIGHT_ENEMY    = 60;

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(15, 20), S(56, 34), S(81, 71), S(198, 144), S(491, 316), S(1221, 1029),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(59, 44), S(57, 26), S(62, 52), S(144, 116), S(654, -90),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-104, -56), S(-116, -27), S(-98, 51), S(-41, 131), S(-29, 276), S(133, 43),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(48, -45), S(29, -4), S(16, 21), S(23, 65), S(98, 136), S(189, 268),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(13, -44), S(-7, 0), S(-29, -25), S(-35, -52), S(-54, -90), S(-227, -141),
};

inline const std::array<PParam, 15> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-73, 0), S(-108, 7), S(-101, -37), S(-103, -63), S(-82, -87), S(-57, -104), S(-37, -127), S(-25, -122), S(-49, -55), S(-10, -53), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
inline const std::array<PParam, 15> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(205, -28), S(188, 5), S(184, 53), S(159, 94), S(169, 122), S(163, 145), S(162, 159), S(161, 164), S(122, 167), S(78, 147), S(-206, 39), S(0, 0), S(0, 0), S(0, 0),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-201, -266), S(-95, -97), S(-38, -46), S(5, -12), S(53, 0), S(80, 40), S(117, 33), S(152, 24), S(203, -46),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-153, -383), S(-79, -189), S(4, -120), S(35, -73), S(65, -36), S(85, -13), S(101, -2), S(117, 3), S(127, 13), S(135, 4), S(157, -11), S(212, -59), S(240, -76), S(303, -116),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-201, -372), S(-112, -135), S(-58, -61), S(-22, -45), S(6, -18), S(28, 0), S(49, 8), S(78, 8), S(104, 17), S(131, 26), S(158, 25), S(175, 29), S(211, 23), S(231, 6), S(370, -118),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-294, 69), S(-287, -799), S(-192, -658), S(-145, -449), S(-121, -263), S(-87, -176), S(-86, -44), S(-61, -46), S(-51, -4), S(-41, 18), S(-32, 41), S(-28, 61), S(-12, 60), S(-2, 62), S(2, 66), S(21, 50), S(14, 62), S(26, 45), S(49, 9), S(77, -32), S(102, -64), S(133, -130), S(187, -164), S(353, -340), S(333, -356), S(763, -598), S(551, -531), S(1257, -898),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(416, 576), S(145, 376), S(47, 455), S(34, 490), S(10, 488), S(-28, 489), S(-3, 483), S(-12, 469), S(-11, 401),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(83, -30), S(152, -72),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(37, -4), S(140, -41),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(67, -48), S(68, -71), S(109, -69), S(135, -123),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-40, 30), S(-59, 41), S(-2, -10), S(145, -89), S(340, -228),
};

inline const PParam PAWN_THREAT_KNIGHT = S(227, 75);
inline const PParam PAWN_THREAT_BISHOP = S(199, 107);
inline const PParam PAWN_THREAT_ROOK   = S(188, 58);
inline const PParam PAWN_THREAT_QUEEN  = S(162, -48);

inline const PParam KNIGHT_THREAT_BISHOP = S(102, 74);
inline const PParam KNIGHT_THREAT_ROOK   = S(236, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(150, -76);

inline const PParam BISHOP_THREAT_KNIGHT = S(106, 28);
inline const PParam BISHOP_THREAT_ROOK   = S(236, 51);
inline const PParam BISHOP_THREAT_QUEEN  = S(188, 57);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(186, 389),    S(202, 430),    S(238, 394),    S(288, 270),    S(201, 286),    S(211, 342),    S(135, 362),    S(172, 326),    //
    S(33, -30),     S(166, -3),     S(134, -66),    S(129, -120),   S(77, -135),    S(31, -101),    S(9, -59),      S(-46, -65),    //
    S(-23, -81),    S(3, -75),      S(13, -120),    S(-5, -132),    S(-18, -140),   S(-58, -136),   S(-93, -85),    S(-123, -65),   //
    S(-35, -133),   S(-15, -101),   S(-20, -138),   S(-33, -136),   S(-52, -151),   S(-81, -138),   S(-130, -88),   S(-149, -100),  //
    S(-52, -160),   S(14, -154),    S(-35, -113),   S(-67, -107),   S(-81, -123),   S(-123, -129),  S(-133, -115),  S(-165, -119),  //
    S(-44, -156),   S(88, -147),    S(42, -116),    S(-16, -97),    S(-51, -115),   S(-84, -122),   S(-105, -96),   S(-140, -110),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-406, -98),   S(-341, 40),    S(-410, 216),   S(-153, 85),    S(-285, 104),   S(-368, 124),   S(-573, 62),    S(-522, 4),     //
    S(-9, 0),       S(74, 12),      S(162, -48),    S(101, 23),     S(110, 21),     S(40, 0),       S(0, 6),        S(-30, -35),    //
    S(55, -18),     S(101, 37),     S(193, 37),     S(145, 52),     S(154, 38),     S(65, 50),      S(60, 19),      S(-35, 19),     //
    S(94, 18),      S(81, 53),      S(114, 66),     S(108, 89),     S(113, 74),     S(71, 78),      S(32, 24),      S(27, 15),      //
    S(95, 5),       S(108, 9),      S(102, 43),     S(89, 49),      S(79, 62),      S(68, 60),      S(40, 21),      S(33, -45),     //
    S(6, -19),      S(22, -28),     S(16, -11),     S(28, 38),      S(37, 36),      S(-21, 12),     S(-8, -34),     S(-47, -37),    //
    S(2, -1),       S(33, -27),     S(12, -23),     S(13, -7),      S(0, -15),      S(-28, -31),    S(-7, -43),     S(-76, -121),   //
    S(-39, -56),    S(4, -30),      S(19, -43),     S(29, -32),     S(24, -23),     S(-20, -59),    S(-41, -40),    S(-92, -81),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-142, 93),    S(-155, 62),    S(-376, 84),    S(-300, 117),   S(-234, 114),   S(-416, 140),   S(-128, 114),   S(-82, 89),     //
    S(37, -14),     S(28, 51),      S(30, 44),      S(27, 27),      S(13, 41),      S(23, 44),      S(4, 42),       S(-33, 39),     //
    S(52, 46),      S(119, 43),     S(231, 34),     S(142, 34),     S(122, 33),     S(95, 52),      S(138, 28),     S(19, 48),      //
    S(67, -3),      S(70, 54),      S(133, 43),     S(144, 65),     S(152, 64),     S(78, 65),      S(53, 49),      S(0, 34),       //
    S(66, -25),     S(90, 10),      S(94, 36),      S(108, 53),     S(98, 72),      S(51, 63),      S(33, 17),      S(22, -34),     //
    S(85, -32),     S(130, -7),     S(129, -2),     S(69, 42),      S(57, 49),      S(44, 48),      S(86, 2),       S(51, -37),     //
    S(73, -68),     S(121, -43),    S(97, -36),     S(70, -3),      S(56, -24),     S(59, -28),     S(30, -17),     S(59, -80),     //
    S(74, -44),     S(63, 1),       S(73, -6),      S(87, -38),     S(96, -46),     S(82, -13),     S(78, -31),     S(51, -29),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(144, 44),     S(215, 41),     S(130, 73),     S(135, 71),     S(153, 50),     S(99, 65),      S(117, 66),     S(132, 68),     //
    S(75, 94),      S(163, 68),     S(226, 50),     S(171, 83),     S(178, 74),     S(128, 85),     S(80, 98),      S(59, 111),     //
    S(57, 71),      S(203, 37),     S(245, 20),     S(266, 11),     S(220, 21),     S(138, 62),     S(151, 51),     S(29, 104),     //
    S(13, 62),      S(86, 53),      S(125, 48),     S(170, 3),      S(136, 27),     S(66, 79),      S(41, 77),      S(-33, 89),     //
    S(-59, 21),     S(24, 28),      S(19, 40),      S(22, 36),      S(18, 28),      S(-14, 76),     S(-42, 71),     S(-64, 59),     //
    S(-88, 2),      S(-13, -24),    S(-15, 0),      S(-33, 7),      S(-7, -17),     S(-60, 34),     S(-66, 20),     S(-85, 14),     //
    S(-132, 7),     S(-43, -41),    S(-18, -32),    S(-5, -32),     S(-12, -29),    S(-31, -15),    S(-50, -34),    S(-90, -21),    //
    S(-110, 11),    S(-71, 17),     S(-24, -18),    S(7, -34),      S(-1, -21),     S(-14, -15),    S(-35, -20),    S(-66, -2),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(54, 81),      S(72, 54),      S(75, 66),      S(-46, 200),    S(39, 101),     S(-39, 151),    S(36, 55),      S(-3, 69),      //
    S(38, 117),     S(-37, 211),    S(-38, 267),    S(-114, 295),   S(-91, 239),    S(-116, 250),   S(-52, 144),    S(-17, 81),     //
    S(-4, 150),     S(78, 157),     S(33, 223),     S(18, 226),     S(-20, 208),    S(-65, 219),    S(12, 111),     S(-25, 77),     //
    S(45, 77),      S(35, 164),     S(11, 184),     S(16, 234),     S(-9, 216),     S(-14, 152),    S(2, 82),       S(0, 36),       //
    S(16, 104),     S(55, 62),      S(30, 127),     S(3, 172),      S(-15, 167),    S(-14, 125),    S(-8, 55),      S(-6, 7),       //
    S(30, -75),     S(51, -20),     S(39, 57),      S(-7, 86),      S(11, 32),      S(10, 41),      S(22, -30),     S(0, -13),      //
    S(16, -173),    S(51, -283),    S(34, -136),    S(52, -64),     S(22, -42),     S(43, -121),    S(20, -52),     S(9, -61),      //
    S(-32, -92),    S(36, -353),    S(32, -349),    S(64, -260),    S(61, -175),    S(67, -216),    S(47, -171),    S(-8, -88),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-106, -453),  S(149, -75),    S(-43, 7),      S(-136, 50),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(237, -151),   S(18, 127),     S(46, 130),     S(200, 73),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-39, 43),     S(93, 129),     S(124, 109),    S(130, 70),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-273, 79),    S(47, 98),      S(44, 101),     S(0, 81),       S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-238, 29),    S(-46, 67),     S(-14, 66),     S(-89, 105),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-159, -4),    S(41, 6),       S(-45, 53),     S(-85, 80),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(63, -96),     S(115, -35),    S(32, 5),       S(-40, 45),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-66, -135),   S(74, -116),    S(-11, -89),    S(-30, -85),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
