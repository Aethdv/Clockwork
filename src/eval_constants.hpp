#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(294, 427);
inline const PParam KNIGHT_MAT = S(1047, 994);
inline const PParam BISHOP_MAT = S(1022, 1043);
inline const PParam ROOK_MAT   = S(1551, 1761);
inline const PParam QUEEN_MAT  = S(3498, 3160);
inline const PParam TEMPO_VAL  = S(51, 17);

inline const PParam BISHOP_PAIR_VAL  = S(73, 184);
inline const PParam DOUBLED_PAWN_VAL = S(-46, -79);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, 0);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(7, 20), S(54, 31), S(84, 70), S(200, 137), S(489, 320), S(1593, 972),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(54, 45), S(53, 25), S(59, 46), S(125, 115), S(729, -157),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-36, -13), S(-39, 5), S(-29, 80), S(33, 162), S(78, 289), S(183, 85),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(52, -48), S(30, -8), S(5, 28), S(13, 67), S(100, 140), S(150, 278),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(20, -52), S(-5, 1), S(-30, -21), S(-29, -51), S(-47, -90), S(-192, -141),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(17, 47), S(-14, 38), S(-46, 46), S(-29, 0), S(-31, -17), S(-8, -45), S(27, -56),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-177, -86), S(24, -79), S(32, -43), S(36, -9), S(11, 21), S(13, 35), S(15, 55),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-246, -227), S(-121, -99), S(-55, -34), S(0, -13), S(45, 3), S(71, 44), S(105, 39), S(135, 34), S(181, -41),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-156, -351), S(-74, -186), S(6, -120), S(23, -63), S(56, -27), S(70, -4), S(91, 3), S(102, 13), S(112, 22), S(119, 14), S(144, 0), S(191, -48), S(228, -72), S(291, -108),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-159, -401), S(-99, -120), S(-42, -52), S(-15, -46), S(5, -14), S(25, 1), S(43, 10), S(75, 8), S(98, 19), S(124, 29), S(150, 30), S(162, 36), S(205, 26), S(208, 18), S(326, -90),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(79, 108), S(-317, -1070), S(-201, -576), S(-155, -343), S(-122, -254), S(-88, -180), S(-106, -8), S(-72, -42), S(-66, 2), S(-57, 22), S(-50, 46), S(-44, 69), S(-25, 60), S(-15, 62), S(-9, 67), S(12, 50), S(3, 65), S(8, 54), S(29, 28), S(61, -26), S(89, -57), S(109, -112), S(199, -180), S(367, -355), S(272, -327), S(829, -641), S(604, -514), S(1365, -971),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(312, 834), S(121, 389), S(37, 465), S(31, 498), S(9, 494), S(-22, 488), S(3, 484), S(4, 468), S(29, 386),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -35), S(149, -79),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(31, 2), S(138, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(69, -54), S(78, -71), S(127, -75), S(133, -124),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-49, 38), S(-64, 47), S(4, -15), S(165, -100), S(393, -258),
};

inline const PParam PAWN_THREAT_KNIGHT = S(220, 65);
inline const PParam PAWN_THREAT_BISHOP = S(187, 87);
inline const PParam PAWN_THREAT_ROOK   = S(180, 35);
inline const PParam PAWN_THREAT_QUEEN  = S(155, -73);

inline const PParam KNIGHT_THREAT_BISHOP = S(89, 72);
inline const PParam KNIGHT_THREAT_ROOK   = S(235, -10);
inline const PParam KNIGHT_THREAT_QUEEN  = S(141, -77);

inline const PParam BISHOP_THREAT_KNIGHT = S(95, 21);
inline const PParam BISHOP_THREAT_ROOK   = S(217, 48);
inline const PParam BISHOP_THREAT_QUEEN  = S(178, 36);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(179, 393),    S(192, 432),    S(219, 429),    S(321, 283),    S(207, 314),    S(237, 381),    S(148, 384),    S(232, 352),    //
    S(49, -30),     S(198, -7),     S(134, -69),    S(143, -135),   S(58, -132),    S(7, -76),      S(-36, -15),    S(-50, -41),    //
    S(-31, -67),    S(-8, -63),     S(-2, -111),    S(-21, -129),   S(-39, -131),   S(-77, -132),   S(-103, -77),   S(-130, -49),   //
    S(-34, -129),   S(-15, -97),    S(-32, -139),   S(-38, -142),   S(-62, -155),   S(-90, -139),   S(-136, -77),   S(-156, -88),   //
    S(-41, -161),   S(23, -156),    S(-34, -112),   S(-76, -108),   S(-80, -126),   S(-126, -132),  S(-136, -111),  S(-175, -107),  //
    S(-33, -161),   S(110, -154),   S(48, -119),    S(-23, -99),    S(-56, -128),   S(-88, -126),   S(-109, -90),   S(-148, -103),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-410, -136),  S(-156, -34),   S(-484, 303),   S(-70, 69),     S(-269, 97),    S(-334, 143),   S(-558, 41),    S(-530, 0),     //
    S(14, -10),     S(123, 13),     S(198, -60),    S(69, 50),      S(112, 31),     S(45, 5),       S(-10, 12),     S(-3, -37),     //
    S(49, -16),     S(51, 81),      S(215, 41),     S(114, 79),     S(152, 45),     S(42, 62),      S(46, 27),      S(-56, 28),     //
    S(118, 23),     S(68, 69),      S(101, 80),     S(90, 102),     S(95, 80),      S(68, 84),      S(21, 20),      S(5, 36),       //
    S(89, 12),      S(104, 21),     S(97, 48),      S(66, 58),      S(66, 67),      S(60, 73),      S(11, 41),      S(32, -57),     //
    S(9, -20),      S(26, -35),     S(13, -18),     S(24, 47),      S(38, 40),      S(-28, 5),      S(-14, -27),    S(-57, -31),    //
    S(22, 6),       S(55, -39),     S(7, -21),      S(3, -4),       S(-9, -16),     S(-38, -33),    S(-5, -50),     S(-93, -142),   //
    S(-37, -37),    S(10, -47),     S(19, -59),     S(41, -39),     S(19, -16),     S(-41, -72),    S(-38, -54),    S(-74, -103),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-182, 132),   S(-146, 67),    S(-460, 110),   S(-287, 130),   S(-249, 128),   S(-420, 138),   S(-71, 102),    S(-29, 77),     //
    S(27, -15),     S(37, 61),      S(40, 60),      S(46, 30),      S(35, 41),      S(30, 50),      S(-9, 54),      S(-40, 52),     //
    S(54, 63),      S(90, 67),      S(260, 46),     S(156, 34),     S(109, 45),     S(59, 84),      S(162, 30),     S(17, 71),      //
    S(62, 8),       S(59, 68),      S(146, 50),     S(150, 66),     S(147, 78),     S(77, 77),      S(58, 55),      S(-12, 57),     //
    S(44, -7),      S(80, 28),      S(85, 42),      S(104, 64),     S(102, 88),     S(44, 79),      S(34, 25),      S(23, -31),     //
    S(78, -24),     S(132, 2),      S(128, 10),     S(56, 59),      S(47, 69),      S(37, 68),      S(95, 10),      S(51, -37),     //
    S(71, -61),     S(123, -29),    S(92, -29),     S(62, 12),      S(49, -12),     S(61, -21),     S(25, 0),       S(49, -87),     //
    S(59, -27),     S(56, 10),      S(49, 18),      S(61, -31),     S(72, -45),     S(68, 0),       S(68, -42),     S(33, -20),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(136, 45),     S(230, 36),     S(121, 81),     S(121, 82),     S(137, 61),     S(79, 78),      S(100, 76),     S(124, 72),     //
    S(107, 84),     S(183, 63),     S(238, 50),     S(180, 86),     S(185, 85),     S(112, 97),     S(71, 106),     S(61, 116),     //
    S(60, 73),      S(260, 24),     S(273, 13),     S(277, 14),     S(212, 33),     S(123, 74),     S(158, 55),     S(17, 111),     //
    S(17, 68),      S(79, 57),      S(122, 50),     S(170, 2),      S(129, 35),     S(59, 92),      S(39, 87),      S(-55, 99),     //
    S(-76, 21),     S(42, 20),      S(27, 33),      S(23, 32),      S(17, 28),      S(-18, 82),     S(-55, 77),     S(-84, 67),     //
    S(-107, 15),    S(15, -46),     S(-6, -5),      S(-33, 6),      S(6, -25),      S(-68, 39),     S(-78, 23),     S(-89, 11),     //
    S(-137, 19),    S(-48, -32),    S(-11, -35),    S(-2, -32),     S(-13, -23),    S(-35, -11),    S(-71, -30),    S(-102, -16),   //
    S(-109, 14),    S(-72, 19),     S(-27, -13),    S(6, -33),      S(-3, -19),     S(-13, -15),    S(-37, -22),    S(-68, -4),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(31, 113),     S(38, 79),      S(87, 65),      S(-64, 208),    S(13, 115),     S(-75, 171),    S(37, 57),      S(-16, 50),     //
    S(83, 85),      S(-64, 228),    S(-55, 288),    S(-122, 301),   S(-91, 235),    S(-130, 255),   S(-66, 144),    S(-25, 65),     //
    S(-15, 157),    S(98, 151),     S(62, 192),     S(14, 235),     S(-34, 216),    S(-75, 224),    S(12, 96),      S(-26, 64),     //
    S(60, 59),      S(48, 140),     S(21, 170),     S(16, 230),     S(-12, 227),    S(-15, 148),    S(9, 63),       S(-10, 46),     //
    S(24, 110),     S(65, 50),      S(28, 138),     S(-1, 184),     S(-17, 175),    S(-14, 132),    S(-10, 47),     S(-8, 0),       //
    S(52, -116),    S(56, -12),     S(45, 61),      S(-16, 99),     S(10, 42),      S(7, 46),       S(26, -41),     S(-9, -15),     //
    S(44, -232),    S(49, -280),    S(26, -124),    S(49, -48),     S(11, -18),     S(46, -125),    S(25, -49),     S(0, -51),      //
    S(-52, -98),    S(2, -342),     S(8, -322),     S(38, -235),    S(50, -138),    S(65, -217),    S(60, -178),    S(-13, -91),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(261, -582),   S(266, -104),   S(-73, 8),      S(-78, 43),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(285, -166),   S(72, 84),      S(-3, 116),     S(182, 64),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-26, 35),     S(84, 111),     S(151, 81),     S(151, 43),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-216, 52),    S(58, 83),      S(90, 80),      S(55, 53),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-194, 9),     S(-27, 58),     S(31, 55),      S(-45, 94),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-153, -5),    S(60, 3),       S(-19, 54),     S(-67, 85),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(76, -90),     S(123, -26),    S(28, 20),      S(-62, 67),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-50, -121),   S(77, -102),    S(-27, -67),    S(-19, -81),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
