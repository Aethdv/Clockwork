#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(296, 427);
inline const PParam KNIGHT_MAT = S(1038, 987);
inline const PParam BISHOP_MAT = S(1029, 1048);
inline const PParam ROOK_MAT   = S(1557, 1759);
inline const PParam QUEEN_MAT  = S(3500, 3161);
inline const PParam TEMPO_VAL  = S(51, 17);

inline const PParam BISHOP_PAIR_VAL  = S(73, 184);
inline const PParam DOUBLED_PAWN_VAL = S(-46, -79);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, 0);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(7, 20), S(54, 31), S(84, 70), S(200, 137), S(489, 319), S(1598, 975),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(54, 45), S(53, 25), S(59, 46), S(125, 115), S(729, -157),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-34, -10), S(-38, 8), S(-28, 83), S(35, 165), S(80, 292), S(189, 85),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(52, -48), S(30, -7), S(5, 28), S(13, 67), S(101, 139), S(150, 278),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(20, -52), S(-5, 1), S(-30, -21), S(-29, -51), S(-47, -90), S(-192, -141),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    S(0, 28), S(20, 52), S(-10, 43), S(-43, 51), S(-25, 4), S(-27, -12), S(-4, -40), S(31, -51),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    S(0, -21), S(-182, -93), S(18, -87), S(27, -50), S(30, -17), S(6, 13), S(8, 28), S(9, 48),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-240, -223), S(-114, -94), S(-49, -30), S(5, -9), S(51, 8), S(77, 49), S(112, 43), S(141, 39), S(188, -37),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-157, -352), S(-74, -187), S(6, -120), S(22, -63), S(56, -28), S(70, -5), S(90, 3), S(102, 13), S(111, 22), S(118, 14), S(143, 0), S(191, -48), S(228, -73), S(290, -108),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-161, -398), S(-101, -117), S(-44, -50), S(-18, -43), S(3, -11), S(23, 4), S(41, 13), S(72, 11), S(95, 21), S(122, 32), S(148, 33), S(160, 39), S(203, 28), S(206, 20), S(324, -87),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(78, 107), S(-330, -1007), S(-202, -576), S(-156, -343), S(-123, -254), S(-89, -182), S(-107, -9), S(-73, -43), S(-67, 1), S(-58, 21), S(-51, 45), S(-45, 68), S(-26, 59), S(-16, 61), S(-11, 66), S(11, 49), S(2, 64), S(7, 53), S(28, 27), S(59, -27), S(88, -57), S(109, -114), S(199, -181), S(366, -357), S(272, -329), S(828, -642), S(614, -522), S(1362, -973),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(300, 851), S(118, 393), S(34, 469), S(28, 502), S(5, 498), S(-25, 492), S(0, 488), S(1, 472), S(25, 390),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -35), S(149, -79),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(31, 2), S(138, -40),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(69, -54), S(78, -71), S(127, -75), S(133, -124),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-49, 38), S(-65, 48), S(4, -14), S(165, -100), S(393, -258),
};

inline const PParam PAWN_THREAT_KNIGHT = S(220, 64);
inline const PParam PAWN_THREAT_BISHOP = S(188, 87);
inline const PParam PAWN_THREAT_ROOK   = S(180, 35);
inline const PParam PAWN_THREAT_QUEEN  = S(155, -73);

inline const PParam KNIGHT_THREAT_BISHOP = S(89, 72);
inline const PParam KNIGHT_THREAT_ROOK   = S(234, -10);
inline const PParam KNIGHT_THREAT_QUEEN  = S(142, -78);

inline const PParam BISHOP_THREAT_KNIGHT = S(95, 21);
inline const PParam BISHOP_THREAT_ROOK   = S(217, 48);
inline const PParam BISHOP_THREAT_QUEEN  = S(177, 36);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(173, 396),    S(186, 435),    S(213, 432),    S(315, 286),    S(201, 317),    S(231, 383),    S(141, 388),    S(226, 355),    //
    S(47, -30),     S(196, -7),     S(132, -69),    S(141, -135),   S(56, -132),    S(5, -76),      S(-38, -15),    S(-52, -41),    //
    S(-33, -67),    S(-10, -63),    S(-4, -111),    S(-23, -129),   S(-41, -131),   S(-79, -132),   S(-105, -77),   S(-132, -49),   //
    S(-36, -129),   S(-17, -97),    S(-34, -139),   S(-40, -142),   S(-64, -155),   S(-92, -139),   S(-138, -77),   S(-158, -88),   //
    S(-43, -161),   S(21, -156),    S(-36, -112),   S(-78, -108),   S(-82, -126),   S(-128, -132),  S(-138, -112),  S(-177, -107),  //
    S(-35, -161),   S(108, -154),   S(46, -119),    S(-25, -99),    S(-58, -128),   S(-90, -127),   S(-111, -90),   S(-150, -103),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-408, -133),  S(-153, -32),   S(-479, 305),   S(-67, 72),     S(-267, 99),    S(-332, 146),   S(-555, 44),    S(-527, 3),     //
    S(17, -8),      S(125, 16),     S(201, -58),    S(72, 52),      S(115, 33),     S(47, 8),       S(-8, 15),      S(-1, -35),     //
    S(51, -14),     S(54, 83),      S(218, 44),     S(117, 81),     S(154, 48),     S(45, 64),      S(49, 29),      S(-53, 30),     //
    S(121, 25),     S(71, 72),      S(103, 82),     S(93, 104),     S(98, 83),      S(70, 86),      S(24, 23),      S(8, 39),       //
    S(92, 15),      S(107, 23),     S(100, 50),     S(68, 60),      S(68, 70),      S(63, 75),      S(14, 43),      S(34, -55),     //
    S(11, -17),     S(28, -32),     S(16, -16),     S(26, 49),      S(40, 42),      S(-25, 7),      S(-11, -25),    S(-54, -28),    //
    S(25, 9),       S(58, -36),     S(10, -19),     S(6, -1),       S(-6, -13),     S(-35, -30),    S(-2, -47),     S(-90, -140),   //
    S(-35, -34),    S(13, -44),     S(22, -57),     S(44, -37),     S(21, -14),     S(-39, -70),    S(-35, -52),    S(-72, -100),   //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-189, 127),   S(-153, 62),    S(-467, 104),   S(-294, 124),   S(-255, 123),   S(-427, 133),   S(-77, 97),     S(-36, 71),     //
    S(22, -20),     S(30, 56),      S(33, 55),      S(40, 24),      S(29, 35),      S(24, 45),      S(-15, 49),     S(-46, 47),     //
    S(47, 58),      S(83, 62),      S(253, 41),     S(149, 29),     S(103, 40),     S(52, 79),      S(156, 25),     S(11, 66),      //
    S(55, 3),       S(53, 63),      S(139, 46),     S(144, 61),     S(140, 72),     S(71, 72),      S(52, 50),      S(-19, 52),     //
    S(38, -12),     S(74, 23),      S(78, 37),      S(98, 59),      S(96, 83),      S(38, 74),      S(28, 19),      S(16, -36),     //
    S(72, -30),     S(126, -2),     S(121, 5),      S(50, 54),      S(41, 64),      S(30, 63),      S(89, 5),       S(45, -42),     //
    S(65, -66),     S(116, -34),    S(85, -35),     S(55, 7),       S(43, -17),     S(55, -26),     S(19, -5),      S(43, -92),     //
    S(53, -32),     S(49, 6),       S(43, 13),      S(54, -37),     S(66, -51),     S(61, -5),      S(61, -47),     S(26, -25),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(133, 43),     S(227, 34),     S(117, 80),     S(118, 80),     S(134, 60),     S(75, 77),      S(97, 74),      S(120, 71),     //
    S(105, 83),     S(180, 62),     S(235, 48),     S(177, 85),     S(182, 83),     S(109, 96),     S(68, 104),     S(57, 115),     //
    S(57, 71),      S(257, 23),     S(270, 12),     S(274, 12),     S(209, 32),     S(120, 73),     S(155, 54),     S(14, 109),     //
    S(14, 67),      S(76, 56),      S(119, 49),     S(167, 0),      S(126, 34),     S(56, 90),      S(36, 85),      S(-58, 97),     //
    S(-79, 19),     S(39, 18),      S(24, 31),      S(21, 31),      S(14, 27),      S(-21, 80),     S(-58, 75),     S(-87, 65),     //
    S(-110, 14),    S(11, -48),     S(-10, -6),     S(-36, 4),      S(2, -26),      S(-72, 38),     S(-81, 21),     S(-93, 9),      //
    S(-140, 17),    S(-51, -34),    S(-14, -37),    S(-5, -34),     S(-16, -24),    S(-38, -12),    S(-74, -32),    S(-105, -17),   //
    S(-112, 12),    S(-76, 18),     S(-30, -15),    S(3, -34),      S(-6, -20),     S(-16, -17),    S(-40, -23),    S(-71, -6),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(30, 113),     S(38, 78),      S(85, 65),      S(-65, 207),    S(13, 114),     S(-76, 170),    S(36, 56),      S(-17, 51),     //
    S(82, 85),      S(-65, 227),    S(-56, 287),    S(-123, 300),   S(-92, 235),    S(-130, 254),   S(-67, 143),    S(-26, 65),     //
    S(-16, 157),    S(97, 151),     S(61, 192),     S(13, 235),     S(-35, 215),    S(-76, 223),    S(11, 96),      S(-27, 64),     //
    S(59, 58),      S(47, 140),     S(21, 170),     S(16, 230),     S(-13, 227),    S(-16, 148),    S(8, 62),       S(-11, 46),     //
    S(23, 109),     S(64, 51),      S(27, 138),     S(-2, 184),     S(-18, 174),    S(-15, 132),    S(-11, 47),     S(-9, 0),       //
    S(51, -116),    S(54, -12),     S(44, 61),      S(-17, 99),     S(9, 41),       S(6, 46),       S(25, -41),     S(-10, -16),    //
    S(43, -232),    S(48, -280),    S(26, -124),    S(48, -48),     S(10, -18),     S(45, -126),    S(24, -50),     S(-1, -51),     //
    S(-52, -99),    S(1, -341),     S(7, -322),     S(37, -235),    S(49, -138),    S(64, -217),    S(59, -178),    S(-14, -91),    //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(290, -588),   S(275, -106),   S(-66, 7),      S(-70, 42),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(291, -166),   S(75, 83),      S(0, 116),      S(186, 63),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-22, 34),     S(88, 110),     S(155, 80),     S(155, 43),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-213, 52),    S(63, 82),      S(94, 80),      S(60, 52),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-190, 9),     S(-23, 57),     S(35, 55),      S(-41, 94),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-149, -6),    S(64, 3),       S(-16, 54),     S(-63, 84),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(80, -90),     S(127, -26),    S(32, 20),      S(-58, 67),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-46, -122),   S(81, -103),    S(-23, -68),    S(-15, -81),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
