#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(298, 412);
inline const PParam KNIGHT_MAT = S(1078, 958);
inline const PParam BISHOP_MAT = S(1053, 1027);
inline const PParam ROOK_MAT   = S(1587, 1708);
inline const PParam QUEEN_MAT  = S(3596, 3052);
inline const PParam TEMPO_VAL  = S(58, 16);

inline const PParam BISHOP_PAIR_VAL  = S(81, 175);
inline const PParam DOUBLED_PAWN_VAL = S(-46, -80);

inline const PParam POTENTIAL_CHECKER_VAL = S(-74, -3);

inline i32 AETH_WEIGHT_FRIENDLY = 40;
inline i32 AETH_WEIGHT_ENEMY = 60;

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(15, 21), S(56, 33), S(81, 71), S(196, 147), S(488, 308), S(1204, 1050),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(59, 45), S(56, 27), S(61, 53), S(144, 115), S(671, -102),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-118, -49), S(-128, -19), S(-107, 57), S(-94, 200), S(-31, 299), S(133, 58),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(48, -44), S(30, -3), S(15, 22), S(28, 57), S(94, 139), S(180, 271),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(13, -43), S(-5, -1), S(-27, -28), S(-34, -55), S(-48, -95), S(-222, -140),
};

inline const std::array<PParam, 15> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-93, 10), S(-124, 12), S(-126, -19), S(-127, -42), S(-98, -61), S(-64, -103), S(-61, -132), S(-53, -146), S(-45, -122), S(-39, -105), S(0, 0), S(0, 0), S(0, 0), S(0, 0),
};
inline const std::array<PParam, 15> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(233, -44), S(217, -11), S(212, 38), S(187, 78), S(198, 104), S(192, 127), S(193, 141), S(194, 147), S(151, 152), S(106, 134), S(-377, 64), S(0, 0), S(0, 0), S(0, 0),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-201, -265), S(-96, -96), S(-39, -45), S(4, -12), S(51, 2), S(79, 41), S(116, 34), S(151, 26), S(203, -45),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-152, -388), S(-79, -191), S(4, -122), S(34, -75), S(64, -38), S(84, -16), S(100, -4), S(115, 1), S(126, 11), S(135, 1), S(157, -13), S(212, -60), S(235, -74), S(300, -115),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-206, -370), S(-113, -135), S(-58, -62), S(-23, -45), S(5, -17), S(27, 0), S(48, 8), S(77, 9), S(103, 17), S(129, 28), S(157, 26), S(173, 31), S(209, 24), S(229, 8), S(367, -115),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-325, 68), S(-283, -804), S(-192, -654), S(-145, -452), S(-119, -267), S(-85, -178), S(-87, -41), S(-60, -44), S(-50, -6), S(-40, 18), S(-31, 40), S(-27, 60), S(-11, 60), S(-1, 62), S(3, 66), S(20, 53), S(14, 63), S(27, 45), S(49, 10), S(78, -32), S(103, -66), S(136, -132), S(188, -165), S(345, -335), S(341, -362), S(757, -591), S(565, -538), S(1245, -893),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(411, 561), S(141, 373), S(44, 454), S(31, 490), S(6, 488), S(-31, 489), S(-5, 482), S(-14, 467), S(-15, 400),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(82, -29), S(151, -72),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(37, -5), S(141, -42),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(67, -48), S(68, -72), S(109, -70), S(139, -125),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-40, 30), S(-59, 42), S(-3, -9), S(145, -90), S(339, -228),
};

inline const PParam PAWN_THREAT_KNIGHT = S(227, 75);
inline const PParam PAWN_THREAT_BISHOP = S(200, 106);
inline const PParam PAWN_THREAT_ROOK   = S(188, 59);
inline const PParam PAWN_THREAT_QUEEN  = S(163, -49);

inline const PParam KNIGHT_THREAT_BISHOP = S(102, 73);
inline const PParam KNIGHT_THREAT_ROOK   = S(236, 0);
inline const PParam KNIGHT_THREAT_QUEEN  = S(149, -72);

inline const PParam BISHOP_THREAT_KNIGHT = S(107, 28);
inline const PParam BISHOP_THREAT_ROOK   = S(236, 51);
inline const PParam BISHOP_THREAT_QUEEN  = S(188, 57);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(180, 386),    S(206, 421),    S(236, 386),    S(289, 267),    S(205, 287),    S(210, 359),    S(128, 387),    S(161, 363),    //
    S(36, -38),     S(171, -16),    S(137, -77),    S(135, -132),   S(82, -138),    S(31, -93),     S(4, -46),      S(-52, -49),    //
    S(-23, -79),    S(3, -73),      S(13, -117),    S(-6, -129),    S(-18, -138),   S(-57, -138),   S(-90, -90),    S(-117, -70),   //
    S(-33, -134),   S(-13, -101),   S(-18, -138),   S(-32, -136),   S(-52, -151),   S(-80, -139),   S(-130, -88),   S(-148, -97),   //
    S(-50, -161),   S(16, -154),    S(-34, -113),   S(-66, -107),   S(-81, -122),   S(-122, -130),  S(-133, -115),  S(-164, -117),  //
    S(-42, -156),   S(90, -147),    S(43, -115),    S(-15, -97),    S(-51, -114),   S(-84, -121),   S(-105, -97),   S(-139, -109),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-396, -105),  S(-343, 45),    S(-419, 224),   S(-134, 76),    S(-284, 99),    S(-364, 122),   S(-565, 65),    S(-519, 13),    //
    S(-6, 2),       S(73, 16),      S(166, -50),    S(110, 19),     S(118, 20),     S(43, -1),      S(-2, 9),       S(-29, -32),    //
    S(59, -18),     S(102, 39),     S(196, 37),     S(146, 53),     S(156, 39),     S(69, 50),      S(64, 18),      S(-33, 21),     //
    S(97, 20),      S(82, 55),      S(117, 66),     S(111, 90),     S(116, 74),     S(74, 79),      S(34, 24),      S(26, 19),      //
    S(96, 6),       S(111, 10),     S(103, 45),     S(91, 50),      S(80, 63),      S(70, 60),      S(40, 23),      S(33, -42),     //
    S(7, -17),      S(24, -26),     S(18, -9),      S(30, 39),      S(40, 36),      S(-19, 13),     S(-6, -34),     S(-45, -35),    //
    S(4, 0),        S(36, -26),     S(13, -21),     S(15, -5),      S(2, -14),      S(-26, -29),    S(-4, -44),     S(-73, -120),   //
    S(-37, -55),    S(5, -26),      S(21, -40),     S(31, -31),     S(26, -22),     S(-19, -57),    S(-38, -39),    S(-91, -76),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-139, 90),    S(-162, 61),    S(-390, 84),    S(-304, 116),   S(-231, 111),   S(-416, 140),   S(-121, 108),   S(-82, 88),     //
    S(37, -16),     S(29, 52),      S(29, 43),      S(25, 29),      S(15, 39),      S(23, 43),      S(4, 40),       S(-34, 38),     //
    S(51, 44),      S(116, 44),     S(230, 35),     S(141, 32),     S(121, 32),     S(95, 50),      S(137, 26),     S(18, 47),      //
    S(66, -4),      S(69, 54),      S(133, 42),     S(144, 64),     S(151, 63),     S(76, 64),      S(52, 48),      S(-3, 36),      //
    S(65, -26),     S(91, 10),      S(94, 34),      S(108, 52),     S(98, 70),      S(50, 62),      S(33, 16),      S(21, -36),     //
    S(84, -33),     S(130, -8),     S(129, -3),     S(69, 39),      S(56, 48),      S(44, 46),      S(85, 1),       S(50, -40),     //
    S(73, -68),     S(121, -44),    S(96, -36),     S(70, -4),      S(56, -24),     S(58, -29),     S(30, -19),     S(60, -81),     //
    S(73, -44),     S(62, 0),       S(72, -7),      S(86, -39),     S(96, -47),     S(82, -13),     S(77, -31),     S(51, -28),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(149, 45),     S(219, 40),     S(129, 76),     S(139, 70),     S(158, 50),     S(104, 64),     S(118, 68),     S(134, 70),     //
    S(77, 94),      S(167, 70),     S(232, 49),     S(174, 84),     S(182, 75),     S(132, 84),     S(83, 98),      S(62, 111),     //
    S(61, 71),      S(205, 39),     S(248, 21),     S(268, 12),     S(222, 23),     S(138, 63),     S(154, 51),     S(33, 103),     //
    S(17, 63),      S(90, 54),      S(128, 49),     S(174, 2),      S(140, 28),     S(68, 80),      S(45, 76),      S(-29, 89),     //
    S(-56, 23),     S(25, 31),      S(22, 41),      S(24, 37),      S(22, 27),      S(-11, 76),     S(-40, 72),     S(-61, 60),     //
    S(-84, 1),      S(-9, -24),     S(-11, 0),      S(-29, 7),      S(-5, -16),     S(-57, 33),     S(-63, 21),     S(-82, 15),     //
    S(-128, 7),     S(-37, -43),    S(-15, -31),    S(-2, -31),     S(-9, -28),     S(-28, -14),    S(-46, -33),    S(-86, -19),    //
    S(-107, 11),    S(-68, 17),     S(-21, -18),    S(10, -35),     S(2, -22),      S(-10, -15),    S(-32, -20),    S(-63, -2),     //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(56, 79),      S(76, 50),      S(75, 65),      S(-47, 202),    S(34, 105),     S(-42, 156),    S(43, 45),      S(-2, 66),      //
    S(38, 120),     S(-37, 212),    S(-39, 268),    S(-113, 292),   S(-91, 239),    S(-115, 249),   S(-51, 143),    S(-18, 83),     //
    S(-3, 149),     S(79, 157),     S(36, 220),     S(17, 224),     S(-20, 206),    S(-64, 216),    S(10, 113),     S(-24, 76),     //
    S(46, 75),      S(37, 162),     S(13, 181),     S(18, 232),     S(-10, 218),    S(-15, 154),    S(1, 82),       S(-2, 41),      //
    S(14, 109),     S(54, 62),      S(29, 129),     S(3, 173),      S(-14, 164),    S(-14, 124),    S(-8, 55),      S(-5, 7),       //
    S(31, -74),     S(48, -16),     S(40, 56),      S(-7, 85),      S(11, 32),      S(9, 43),       S(20, -28),     S(0, -17),      //
    S(17, -179),    S(51, -286),    S(35, -138),    S(51, -61),     S(22, -42),     S(43, -120),    S(19, -52),     S(7, -57),      //
    S(-33, -88),    S(35, -350),    S(33, -351),    S(64, -259),    S(60, -174),    S(67, -215),    S(46, -166),    S(-9, -85),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-88, -474),   S(139, -88),    S(-60, -5),     S(-121, 36),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(235, -166),   S(31, 108),     S(53, 110),     S(196, 58),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-26, 31),     S(116, 112),    S(144, 93),     S(142, 55),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-260, 72),    S(58, 90),      S(58, 93),      S(7, 73),       S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-230, 27),    S(-39, 65),     S(-8, 63),      S(-81, 102),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-159, -2),    S(40, 6),       S(-47, 55),     S(-87, 82),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(62, -91),     S(113, -31),    S(29, 8),       S(-44, 48),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-68, -127),   S(72, -113),    S(-12, -87),    S(-32, -82),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on

}
