#pragma once

#include "eval_types.hpp"

namespace Clockwork {

// clang-format off
inline const PParam PAWN_MAT   = S(297, 408);
inline const PParam KNIGHT_MAT = S(1083, 968);
inline const PParam BISHOP_MAT = S(1051, 1025);
inline const PParam ROOK_MAT   = S(1590, 1703);
inline const PParam QUEEN_MAT  = S(3607, 3042);
inline const PParam TEMPO_VAL  = S(58, 16);

inline const PParam BISHOP_PAIR_VAL  = S(80, 176);
inline const PParam DOUBLED_PAWN_VAL = S(-46, -81);

inline const PParam POTENTIAL_CHECKER_VAL = S(-75, -1);

inline const PParam ROOK_ON_SEVENTH = S(2, -18);
inline const PParam ROOK_ON_SEVENTH_KING_TRAPPED = S(-39, 96);

inline const std::array<PParam, 6> PAWN_PHALANX = {
    S(14, 22), S(56, 33), S(81, 69), S(202, 137), S(499, 282), S(1223, 1016),
};
inline const std::array<PParam, 5> DEFENDED_PAWN = {
    S(58, 46), S(57, 26), S(62, 52), S(144, 116), S(654, -86),
};
inline const std::array<PParam, 6> PASSED_PAWN = {
    S(-55, 3), S(-42, 19), S(-11, 90), S(57, 165), S(95, 294), S(211, 83),
};
inline const std::array<PParam, 6> DEFENDED_PASSED_PUSH = {
    S(46, -42), S(29, -1), S(12, 28), S(17, 74), S(81, 156), S(176, 268),
};
inline const std::array<PParam, 6> BLOCKED_PASSED_PAWN = {
    S(13, -42), S(-8, 2), S(-31, -20), S(-37, -46), S(-53, -87), S(-225, -142),
};

inline const std::array<PParam, 8> FRIENDLY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(8, 36), S(-33, 41), S(-24, -10), S(-13, -39), S(-6, -34), S(22, -40), S(1, -52),
};
inline const std::array<PParam, 8> ENEMY_KING_PASSED_PAWN_DISTANCE = {
    CS(0, 0), S(-170, -93), S(29, -50), S(-9, -8), S(9, 23), S(15, 47), S(38, 45), S(-10, 67),
};

inline const std::array<PParam, 9> KNIGHT_MOBILITY = {
    S(-206, -264), S(-99, -100), S(-42, -49), S(2, -17), S(49, -3), S(77, 35), S(114, 28), S(150, 18), S(202, -55),
};
inline const std::array<PParam, 14> BISHOP_MOBILITY = {
    S(-150, -386), S(-77, -189), S(7, -122), S(38, -75), S(68, -39), S(88, -17), S(105, -6), S(120, 0), S(131, 9), S(139, -1), S(162, -17), S(217, -65), S(247, -83), S(310, -124),
};
inline const std::array<PParam, 15> ROOK_MOBILITY = {
    S(-200, -374), S(-112, -132), S(-57, -58), S(-21, -42), S(7, -15), S(29, 1), S(50, 10), S(80, 9), S(105, 17), S(132, 28), S(160, 26), S(176, 31), S(213, 24), S(232, 8), S(370, -115),
};
inline const std::array<PParam, 28> QUEEN_MOBILITY = {
    S(-294, 69), S(-290, -775), S(-193, -659), S(-147, -440), S(-122, -259), S(-87, -176), S(-88, -39), S(-62, -41), S(-51, -2), S(-41, 20), S(-33, 42), S(-28, 61), S(-12, 61), S(-2, 63), S(3, 66), S(21, 51), S(14, 63), S(26, 45), S(49, 10), S(79, -34), S(101, -64), S(138, -134), S(189, -168), S(355, -345), S(346, -366), S(760, -595), S(558, -541), S(1260, -901),
};
inline const std::array<PParam, 9> KING_MOBILITY = {
    S(417, 574), S(141, 376), S(43, 461), S(30, 496), S(7, 491), S(-30, 493), S(-5, 486), S(-12, 466), S(-9, 396),
};

inline const std::array<PParam, 3> KNIGHT_KING_RING = {
    CS(0, 0), S(84, -32), S(154, -77),
};
inline const std::array<PParam, 3> BISHOP_KING_RING = {
    CS(0, 0), S(36, -2), S(141, -42),
};
inline const std::array<PParam, 5> ROOK_KING_RING = {
    CS(0, 0), S(67, -47), S(70, -73), S(112, -76), S(148, -133),
};
inline const std::array<PParam, 6> QUEEN_KING_RING = {
    CS(0, 0), S(-40, 32), S(-59, 43), S(-3, -5), S(146, -88), S(341, -229),
};

inline const PParam PAWN_THREAT_KNIGHT = S(228, 73);
inline const PParam PAWN_THREAT_BISHOP = S(200, 103);
inline const PParam PAWN_THREAT_ROOK   = S(191, 53);
inline const PParam PAWN_THREAT_QUEEN  = S(162, -49);

inline const PParam KNIGHT_THREAT_BISHOP = S(101, 74);
inline const PParam KNIGHT_THREAT_ROOK   = S(236, 1);
inline const PParam KNIGHT_THREAT_QUEEN  = S(149, -73);

inline const PParam BISHOP_THREAT_KNIGHT = S(107, 27);
inline const PParam BISHOP_THREAT_ROOK   = S(237, 51);
inline const PParam BISHOP_THREAT_QUEEN  = S(188, 59);

inline const std::array<PParam, 48> PAWN_PSQT = {
    S(201, 393),    S(218, 438),    S(252, 411),    S(312, 287),    S(235, 296),    S(236, 359),    S(160, 374),    S(199, 348),    //
    S(35, -34),     S(167, -8),     S(136, -68),    S(138, -124),   S(93, -139),    S(39, -94),     S(8, -47),      S(-55, -46),    //
    S(-24, -74),    S(3, -70),      S(14, -114),    S(-2, -128),    S(-14, -133),   S(-54, -130),   S(-92, -79),    S(-124, -60),   //
    S(-33, -130),   S(-11, -99),    S(-16, -136),   S(-29, -135),   S(-50, -146),   S(-79, -130),   S(-131, -78),   S(-152, -93),   //
    S(-49, -159),   S(19, -155),    S(-31, -115),   S(-62, -109),   S(-77, -119),   S(-120, -122),  S(-133, -107),  S(-168, -111),  //
    S(-40, -156),   S(94, -152),    S(49, -121),    S(-9, -103),    S(-46, -114),   S(-81, -116),   S(-105, -90),   S(-143, -104),  //
};
inline const std::array<PParam, 64> KNIGHT_PSQT = {
    S(-400, -110),  S(-344, 38),    S(-416, 220),   S(-146, 82),    S(-283, 102),   S(-359, 118),   S(-562, 60),    S(-526, 7),     //
    S(-8, -1),      S(75, 8),       S(163, -51),    S(104, 20),     S(114, 17),     S(40, -6),      S(-3, 6),       S(-32, -37),    //
    S(57, -24),     S(97, 38),      S(195, 35),     S(143, 53),     S(153, 39),     S(64, 49),      S(60, 15),      S(-35, 16),     //
    S(96, 14),      S(80, 51),      S(112, 66),     S(108, 87),     S(112, 73),     S(71, 77),      S(33, 22),      S(28, 10),      //
    S(95, 1),       S(109, 6),      S(103, 40),     S(88, 46),      S(79, 58),      S(67, 58),      S(39, 17),      S(34, -52),     //
    S(7, -22),      S(23, -31),     S(16, -13),     S(28, 37),      S(37, 33),      S(-21, 9),      S(-9, -37),     S(-47, -41),    //
    S(4, -7),       S(34, -33),     S(13, -29),     S(15, -12),     S(1, -20),      S(-27, -35),    S(-7, -48),     S(-75, -124),   //
    S(-38, -65),    S(6, -38),      S(21, -48),     S(30, -38),     S(25, -29),     S(-19, -64),    S(-39, -46),    S(-91, -87),    //
};
inline const std::array<PParam, 64> BISHOP_PSQT = {
    S(-139, 93),    S(-159, 59),    S(-385, 83),    S(-302, 116),   S(-230, 111),   S(-413, 138),   S(-120, 109),   S(-82, 93),     //
    S(39, -16),     S(29, 50),      S(33, 43),      S(26, 30),      S(13, 42),      S(23, 46),      S(7, 42),       S(-32, 37),     //
    S(53, 44),      S(120, 43),     S(230, 36),     S(141, 36),     S(122, 34),     S(95, 55),      S(139, 28),     S(21, 47),      //
    S(67, -2),      S(69, 55),      S(135, 42),     S(145, 64),     S(152, 65),     S(80, 65),      S(54, 49),      S(0, 34),       //
    S(65, -21),     S(92, 11),      S(94, 36),      S(109, 54),     S(98, 74),      S(50, 65),      S(33, 18),      S(22, -33),     //
    S(85, -31),     S(131, -6),     S(129, 0),      S(69, 43),      S(57, 50),      S(45, 48),      S(86, 2),       S(50, -36),     //
    S(73, -70),     S(122, -43),    S(98, -35),     S(70, -2),      S(57, -24),     S(59, -27),     S(31, -17),     S(60, -79),     //
    S(74, -44),     S(66, -3),      S(74, -8),      S(88, -39),     S(97, -47),     S(83, -13),     S(79, -32),     S(52, -28),     //
};
inline const std::array<PParam, 64> ROOK_PSQT = {
    S(148, 43),     S(212, 42),     S(129, 74),     S(137, 70),     S(158, 48),     S(102, 64),     S(117, 69),     S(128, 70),     //
    S(86, 82),      S(168, 61),     S(230, 42),     S(175, 72),     S(186, 61),     S(137, 71),     S(88, 87),      S(67, 99),      //
    S(59, 72),      S(200, 40),     S(244, 23),     S(264, 14),     S(219, 26),     S(136, 66),     S(149, 54),     S(29, 106),     //
    S(14, 63),      S(85, 55),      S(123, 50),     S(171, 4),      S(136, 31),     S(65, 83),      S(41, 77),      S(-32, 90),     //
    S(-58, 23),     S(24, 29),      S(20, 40),      S(23, 36),      S(18, 30),      S(-14, 78),     S(-43, 73),     S(-65, 60),     //
    S(-87, 1),      S(-13, -24),    S(-15, 1),      S(-31, 7),      S(-8, -13),     S(-60, 34),     S(-65, 22),     S(-84, 14),     //
    S(-131, 7),     S(-41, -41),    S(-18, -31),    S(-5, -32),     S(-12, -26),    S(-32, -12),    S(-49, -33),    S(-89, -18),    //
    S(-110, 13),    S(-71, 18),     S(-25, -14),    S(7, -32),      S(-2, -18),     S(-14, -11),    S(-35, -17),    S(-66, 0),      //
};
inline const std::array<PParam, 64> QUEEN_PSQT = {
    S(55, 78),      S(78, 45),      S(75, 62),      S(-47, 200),    S(40, 98),      S(-38, 145),    S(44, 43),      S(0, 61),       //
    S(37, 121),     S(-38, 214),    S(-39, 266),    S(-112, 294),   S(-94, 242),    S(-115, 250),   S(-52, 146),    S(-20, 81),     //
    S(-6, 155),     S(76, 160),     S(34, 224),     S(19, 223),     S(-23, 213),    S(-64, 218),    S(11, 113),     S(-24, 73),     //
    S(45, 77),      S(37, 162),     S(9, 188),      S(13, 238),     S(-12, 222),    S(-14, 154),    S(1, 82),       S(0, 35),       //
    S(17, 103),     S(54, 64),      S(29, 127),     S(1, 177),      S(-14, 167),    S(-14, 125),    S(-8, 54),      S(-7, 7),       //
    S(31, -73),     S(49, -16),     S(40, 57),      S(-7, 87),      S(11, 33),      S(9, 44),       S(21, -29),     S(0, -16),      //
    S(17, -182),    S(50, -282),    S(35, -138),    S(52, -64),     S(22, -41),     S(43, -120),    S(21, -54),     S(9, -61),      //
    S(-32, -95),    S(35, -354),    S(32, -349),    S(65, -260),    S(61, -175),    S(68, -219),    S(46, -167),    S(-8, -85),     //
};
inline const std::array<PParam, 64> KING_PSQT = {
    S(-105, -435),  S(127, -72),    S(-65, 0),      S(-156, 33),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(225, -149),   S(-7, 125),     S(3, 124),      S(140, 67),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-49, 32),     S(67, 120),     S(79, 101),     S(88, 56),      S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-271, 62),    S(28, 83),      S(24, 85),      S(-40, 68),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-229, 15),    S(-47, 56),     S(-25, 58),     S(-105, 97),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-148, -14),   S(46, 0),       S(-43, 51),     S(-89, 80),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(73, -97),     S(122, -34),    S(35, 11),      S(-40, 54),     S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
    S(-58, -119),   S(80, -106),    S(-8, -72),     S(-30, -65),    S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        //
};
// clang-format on
}
